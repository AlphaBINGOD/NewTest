在Itenllij idea中构建一个Javaweb的基本步骤

一、新建一个project

1. 在idea中，点击file，选择new project，选择Maven，在右侧上方添加project JDK路径（也就是自己的JDK安装路径），点击next
需要填写3个内容
groupID  ：公司、组织名称
artifactID ：组件名称
version   ：版本号
点击next后，确认一下需要保存项目的位置，点击finish完成新建Maven 项目。

二、对pom.xml进行相关设置

新建一个项目后，左侧project列表里会自动生成一些文件。这里我们先关注pom.xml文件（project–object-model，项目对象模型，
通过xml表示maven项目，使用pom.xml来实现。主要描述了项目：包括配置文件；开发者需要遵循的规则，缺陷管理系统，组织和licenses，
项目的url，项目的依赖性，以及其他所有的项目相关因素），这个文件用于配置我们的Maven项目。
 
pom（project-object-model）文件配置部分
1.	配置标签简要（以下是一些标签分类）
<project>
  <modelVersion>4.0.0</modelVersion>
<!-- 基础设置 -->
  <groupId>...</groupId>
  <artifactId>...</artifactId>
  <version>...</version>
  <packaging>...</packaging>
  <name>...</name>
  <url>...</url>
  <dependencies>...</dependencies>
  <parent>...</parent>
  <dependencyManagement>...</dependencyManagement>
  <modules>...</modules>
  <properties>...</properties>

  <!--构建设置 -->
  <build>...</build>
  <reporting>...</reporting>

  <!-- 更多项目信息 -->
  <name>...</name>
  <description>...</description>
  <url>...</url>
  <inceptionYear>...</inceptionYear>
  <licenses>...</licenses>
  <organization>...</organization>
  <developers>...</developers>
  <contributors>...</contributors>

  <!-- 环境设置-->
  <issueManagement>...</issueManagement>
  <ciManagement>...</ciManagement>
  <mailingLists>...</mailingLists> 
  <scm>...</scm>
  <prerequisites>...</prerequisites>
  <repositories>...</repositories>
  <pluginRepositories>...</pluginRepositories>
  <distributionManagement>...</distributionManagement>
  <profiles>...</profiles>
</project>

2.配置pom.xml文件（以下是一些常用配置方式，建议每完成一个插件的导入，就点击一次右下角弹出的import changes，
点击后，会自动下载对应的jar包，这个变化可以从左侧project列表中的External libraries 中查看到）
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.zsb</groupId>
    <artifactId>chapter02</artifactId>
    <version>1.0.0</version>
    <!--******************************************************************************-->
    <!--把项目资源文件打成war包*******************************************************-->
    <packaging>war</packaging>
    <!--以上为基本配置****************************************************************-->
    <!--下面进入常用配置**************************************************************-->
    <!--常用配置1，统一源代码的编码方式，否则使用maven编译源码source时会出现警告，
所以一般情况下使用UTF-8进行编码，properties是声明一下变量或常量-->
    <properties>
        <!--变量名project.build.sourceEncoding：值UTF-8,全局环境都可以使用该变量-->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <!--添加javaweb的maven依赖: 引用外部的编程模型，在别人的编程模型下编程，也就是一些jar，lib库-->
    <!--在dependencies标签内添加具体的dependency，包括了对servlet，jsp，jstl的依赖 -->
    <dependencies>
        <!--servlet依赖的编程模型，就是引用servlet相关的jar，jar中的class文件-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
        </dependency>
        <!--JSP-->
        <dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>jsp-api</artifactId>
            <version>2.2</version>
        </dependency>
        <!--JSTL-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
            <scope>runtime</scope>
        </dependency>
        <!--两年内一定要弄懂的东西。关于scope的使用技巧，有些jar、lib依赖，只需要在runtime运行时之下的需要的，但不需要参与编译。例如，一些JDBC的驱动、JSTL的jar包，可将scope设置为runtime）-->
    </dependencies>

    <!--build—构建设置*******************************************-->
    <build>
        <!--plugins里都是针对maven的插件，在该标签下，使用不带s的plugin双标签进行具体插件的插入，每一个plugin标签内，都需要有groupId，artifactId，version三个标签对具体的插件进行指定-->

        <plugins>
            <!--插件1-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <!--没有编译就不能使用-->
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.3</version>
                <configuration>
                    <!--源代码source的JAVA版本-->
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <!--Test,跳过测试的插件-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.18.1</version>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>
            <!--tomcat部分插件-->
            <plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <version>2.2</version>
                <configuration>
                    <!--取系统变量的值，系统变量不需要自己声明，project对象下有很多的属性-->
                    <path>/${project.artifactId}</path>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <!--build****************************************-->
</project>



三、添加web.xml文件

左侧project列表，依次点击 SRC > main
在main目录下（这个目录层次很重要，是一个规范，大小写也不能更改），逐层如下新建：
webapp（文件夹） >  WEB-INF（文件夹） >  web.xml（文件）
最后，向web.xml文件添加一个文件头。这个文件头是一个比较固定的形式，主要差别在用我们使用的版本号，这个版本号需要与我们之前配置pom.xml文件中的servlet中的版本号对应。同时，我们也可以到网上找到这个文件头。
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation=http://xmlns.jcp.org/xml/ns/javaee              
         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd
version="3.1"
    metadata-complete="true">
</web-app>

 
四、编写我们自己的servlet类
同样在main目录下，会有一个java文件夹，这个文件夹是创建project的时候自动建立的。
在这个java文件夹内，新建一个java.class，命名的时候写入包名信息，可以自动添加包名，我命名为com.zsb.web.HelloServlet。

package com.zsb.web;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

//必须继承HttpServlet
public class HelloServlet extends HttpServlet {

    public  void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-hh-mm-ss");
        String currentTime = dateFormat.format(new Date());
        req.setAttribute("now",currentTime);
        //请求调度器，通过请求调度器，调度一个参数到想要调度的服务器位置
        RequestDispatcher requestDispatcher = req.getRequestDispatcher("/WEB-INF/jsp/hello.jsp");
        //服务器接过客户端发来的请求，传递到参数调度的位置
        requestDispatcher.forward(req,resp);
    }
}

五、建立一个jsp返回页面

在web.xml相同目录下（webapp > WEB-INF）,新建一个jsp文件夹，并在这个文件夹下新建一个hello.jsp文件。

<%@ page language="java" import="java.util.*" pageEncoding="UTF-8"%>
<html>
  <head>
      <title>我的第一个 HTML 页面</title>
  </head>
  <body>
      时间：${now}
  </body>
</html>
$符号表示取一个变量的值，这个变量就是在我们新建的HelloServlet类中新建的now变量。
在服务器返回了这个jsp页面后，页面上就会显示这个信息。


六、Tomcat配置

为了让web应用跑起来。
在idea中配置tomcat，需要注意以下步骤：
1.点击run  >  edit configurations ，弹出run/debug对话框;
2.点击左上角 + 号按钮（或者alt+ins快捷键），然后选择tomcat sever，选择local选项
3.对tomcat命名，譬如，tomcat，取消after lauch按钮，添加本地tomcat，并在下拉框中选择一个tomcat
4.切换到depolyment选项卡，单击右侧 + 号（alt + ins快捷键），选择artifact…选项，弹出Select Artifact to Deyploy对话框。
5.选择chapter1：war is exploded （war包被分解），单击OK（或者enter键），关闭Select Artifact to Deyploy对话框。
6.切换到run/debug configuration 对话框，在application context（应用上下文环境）中输入 /chapter1
7.切回sever选项卡，在On frame deactivation（在你失去焦点的时候自动编译）下拉框中选择如下
    on update action: Redeploy
    on frame deactivation: Update classes and resoureces
    单击OK，完成所有配置。
8.单击idea 工具栏上的run或者debug（推荐，可实时编译），启动tomcat并部署web应用
注意：在热部署web应用的时候，ctrl + F9可以手动编译，如果在有修改了标识符（类名，方法名，成员名，变量名等）的时候，是无法进行热部署的。
9.  运行tomcat服务器，打开浏览器，地址栏输入localhost:/8080/chapter1/hello
    刷新后可以如果看到一个页面，包含的信息是“时间：XXXX-XX-XX-XX-XX-XX”，那么说明这个web项目搭建成功。
 
七、 提交本地git仓库

1.在idea中，找到VCS菜单，单击import into version control  >  create git repository…
在弹出的对话框中，选中项目根目录（包含所有项目文件），单击OK，关闭对话框（此时，相当我们的git init命令）
2.再次选中项目根目录（在左侧菜单中选中），在VCS菜单中（或者右键菜单），单击git add，项目快照进入暂存区，要从暂存区推送到本地版本库，需要git commit
3.在VCS菜单或者右键菜单，单击Git > Commit Directory，在弹出对话框中确认是否进行提交操作，在commit message内，写入 –m “” 提交信息，单击commit按钮，即可提交项目到本地git仓库。（注意：没add的任何代码，是无法进行commit操作的。）也可以单击工具栏中的commit changes 按钮，或者使用快捷键ctrl + K 来做同样的事情。
PS：在提交代码的时候，建议勾选Optimize imports（最优化导入），可以优化import语句，去掉未使用的包。


八、推送远程仓库

1、VCS菜单 > git push 菜单（ctrl + shift + K），（注意：推送前，必须让本地仓库与远程仓库建立连接），我们可以使用开源中国的码云仓库，也可以使用github的仓库，首先，我们需要在他们当中创建一个仓库，然后，执行如下命令：
git remote add origin[简名]  Git的仓库地址；
git push –u origin[简名] master 
注意.gitignore的顺序问题。
最好先确定需要忽略的文件，先写到.gitignore文件中。
如果一开始已经被add到版本库的暂存区stage/index中，那么后续的.gitignore文件即使包含了这个文件也不会被忽略。

/*----------------------------------以下是我遇到的一些坑-----------------------------------------------------*/
1、Tomcat配置天坑
今天在idea中搭建web项目框架的过程中，遇到了一个很崩溃的问题，idea框架检测提示（frameworks detected）出不来，在run/debug configuration对话框中的单击 + 号按钮找不到tomcat选项，解决方法如下：
在setting中添加plugins（搜索tomcat），会找到一个插件（Tomcat and TomEE Integrartion）
勾选后，选择ok，会提示重启idea，重启后问题得到解决。

